{"input": "Hello World", "output": "INCLUDE Irvine32.inc\n.data\nmsg byte \"Hello World\", 0\n.code\nmain PROC\n    mov edx, OFFSET msg\n    call WriteString\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Print Numbers 1 to 5", "output": "INCLUDE Irvine32.inc\n.data\n.code\nmain PROC\n    mov ecx, 5\n    mov eax, 1\nprint_loop:\n    call WriteInt\n    call Crlf\n    inc eax\n    loop print_loop\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Addition of Two Numbers", "output": "INCLUDE Irvine32.inc\n.data\na dword 10\nb dword 15\n.code\nmain PROC\n    mov eax, a\n    add eax, b\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main\n\n 4. Subtraction, Multiplication, Division\nINCLUDE Irvine32.inc\n.data\nx dword 20\ny dword 5\n.code\nmain PROC\n    ; Subtraction\n    mov eax, x\n    sub eax, y\n    call WriteInt\n    call Crlf\n\n    ; Multiplication\n    mov eax, x\n    imul y\n    call WriteInt\n    call Crlf\n\n    ; Division\n    mov eax, x\n    cdq\n    idiv y\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Input from User and Display", "output": "INCLUDE Irvine32.inc\n.data\n.code\nmain PROC\n    call ReadInt\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Display ASCII Characters A–Z", "output": "INCLUDE Irvine32.inc\n.data\n.code\nmain PROC\n    mov ecx, 26\n    mov al, 'A'\nprint_ascii:\n    call WriteChar\n    call Crlf\n    inc al\n    loop print_ascii\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Compare Two Numbers", "output": "INCLUDE Irvine32.inc\n.data\nnum1 dword 12\nnum2 dword 20\n.code\nmain PROC\n    mov eax, num1\n    cmp eax, num2\n    jge done\n    mov eax, num2\ndone:\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Loop to Sum 1–10", "output": "INCLUDE Irvine32.inc\n.data\nsum dword ?\n.code\nmain PROC\n    xor eax, eax\n    mov ecx, 10\n    mov ebx, 1\nsum_loop:\n    add eax, ebx\n    inc ebx\n    loop sum_loop\n    mov sum, eax\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "If-Else Logic: Even or Odd", "output": "INCLUDE Irvine32.inc\n.data\nval dword 7\nmsgEven byte \"Even\", 0\nmsgOdd byte \"Odd\", 0\n.code\nmain PROC\n    mov eax, val\n    and eax, 1\n    jz even\n    mov edx, OFFSET msgOdd\n    call WriteString\n    jmp done\neven:\n    mov edx, OFFSET msgEven\n    call WriteString\ndone:\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Simple Array Traversal", "output": "INCLUDE Irvine32.inc\n.data\narr dword 5, 10, 15, 20, 25\n.code\nmain PROC\n    mov esi, OFFSET arr\n    mov ecx, 5\nprint_loop:\n    mov eax, [esi]\n    call WriteInt\n    call Crlf\n    add esi, 4\n    loop print_loop\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Count Vowels in a String", "output": "INCLUDE Irvine32.inc\n.data\ntext byte \"assembly language\", 0\nvowels byte \"aeiou\", 0\ncount dword 0\n.code\nmain PROC\n    mov esi, OFFSET text\nnext_char:\n    mov al, [esi]\n    cmp al, 0\n    je done\n    push esi\n    mov edi, OFFSET vowels\n    mov ecx, 5\ncheck_vowel:\n    mov bl, [edi]\n    cmp al, bl\n    je found\n    inc edi\n    loop check_vowel\n    pop esi\n    inc esi\n    jmp next_char\nfound:\n    pop esi\n    inc dword ptr [count]\n    inc esi\n    jmp next_char\ndone:\n    mov eax, count\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Reverse a String", "output": "INCLUDE Irvine32.inc\n.data\nstr byte \"HELLO\", 0\nlen = ($ - str)\n.code\nmain PROC\n    mov esi, OFFSET str\n    add esi, len\n    dec esi\n    mov ecx, len\nreverse_loop:\n    mov al, [esi]\n    call WriteChar\n    dec esi\n    loop reverse_loop\n    call Crlf\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Copy One String to Another", "output": "INCLUDE Irvine32.inc\n.data\nsrc byte \"MASM\", 0\ndest byte 10 dup(?)\n.code\nmain PROC\n    mov esi, OFFSET src\n    mov edi, OFFSET dest\ncopy_loop:\n    mov al, [esi]\n    mov [edi], al\n    cmp al, 0\n    je copied\n    inc esi\n    inc edi\n    jmp copy_loop\ncopied:\n    mov edx, OFFSET dest\n    call WriteString\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Find Maximum in an Array", "output": "INCLUDE Irvine32.inc\n.data\narr dword 10, 22, 5, 9, 33\n.code\nmain PROC\n    mov esi, OFFSET arr\n    mov eax, [esi]\n    add esi, 4\n    mov ecx, 4\nfind_max:\n    cmp [esi], eax\n    jle skip\n    mov eax, [esi]\nskip:\n    add esi, 4\n    loop find_max\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Factorial of 5", "output": "INCLUDE Irvine32.inc\n.data\n.code\nmain PROC\n    mov eax, 1\n    mov ecx, 5\nfactorial_loop:\n    mul ecx\n    loop factorial_loop\n    call WriteInt\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Fibonacci (First 7 Numbers)", "output": "INCLUDE Irvine32.inc\n.data\nfib dword 1, 1, 0, 0, 0, 0, 0\n.code\nmain PROC\n    mov esi, OFFSET fib\n    mov ecx, 5\nnext_fib:\n    mov eax, [esi]\n    mov ebx, [esi+4]\n    add eax, ebx\n    mov [esi+8], eax\n    add esi, 4\n    loop next_fib\n\n    mov esi, OFFSET fib\n    mov ecx, 7\nprint_fib:\n    mov eax, [esi]\n    call WriteInt\n    call Crlf\n    add esi, 4\n    loop print_fib\n\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Simple Calculator (Add/Sub/Mul/Div)", "output": "INCLUDE Irvine32.inc\n.data\na dword 12\nb dword 4\n.code\nmain PROC\n    ; Addition\n    mov eax, a\n    add eax, b\n    call WriteInt\n    call Crlf\n\n    ; Subtraction\n    mov eax, a\n    sub eax, b\n    call WriteInt\n    call Crlf\n\n    ; Multiplication\n    mov eax, a\n    imul b\n    call WriteInt\n    call Crlf\n\n    ; Division\n    mov eax, a\n    cdq\n    idiv b\n    call WriteInt\n    call Crlf\n\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Palindrome Checker (121)", "output": "INCLUDE Irvine32.inc\n.data\nnum dword 121\ntemp dword ?\nrev dword 0\n.code\nmain PROC\n    mov eax, num\n    mov temp, eax\n    xor ebx, ebx\n\nreverse_loop:\n    mov edx, 0\n    mov ecx, 10\n    div ecx\n    push edx\n    inc ebx\n    test eax, eax\n    jnz reverse_loop\n\n    mov eax, 0\n\nbuild_rev:\n    pop edx\n    mov ecx, 10\n    mul ecx\n    add eax, edx\n    dec ebx\n    jnz build_rev\n\n    mov rev, eax\n    cmp rev, temp\n    je is_palindrome\n\n    mov edx, OFFSET not_msg\n    call WriteString\n    jmp done\nis_palindrome:\n    mov edx, OFFSET yes_msg\n    call WriteString\ndone:\n    call waitmsg\nmain ENDP\n.data\nyes_msg byte \"Palindrome\", 0\nnot_msg byte \"Not Palindrome\", 0"}
{"input": "Clear Screen and Print", "output": "INCLUDE Irvine32.inc\n.data\nmsg byte \"Screen Cleared!\", 0\n.code\nmain PROC\n    call Clrscr\n    mov edx, OFFSET msg\n    call WriteString\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Procedure to Double a Number", "output": "INCLUDE Irvine32.inc\n.data\nnum dword 7\n.code\nmain PROC\n    mov eax, num\n    call Double\n    call WriteInt\n    call waitmsg\nmain ENDP\n\nDouble PROC\n    shl eax, 1\n    ret\nDouble ENDP\nEND main"}
{"input": "Bubble Sort (5 elements)", "output": "INCLUDE Irvine32.inc\n.data\narr dword 5, 1, 4, 2, 3\n.code\nmain PROC\n    mov ecx, 5\nouter:\n    mov esi, OFFSET arr\n    mov edx, ecx\n    dec edx\ninner:\n    mov eax, [esi]\n    cmp eax, [esi+4]\n    jle no_swap\n    xchg eax, [esi+4]\n    mov [esi], eax\nno_swap:\n    add esi, 4\n    dec edx\n    jnz inner\n    loop outer\n\n    mov esi, OFFSET arr\n    mov ecx, 5\nprint_sorted:\n    mov eax, [esi]\n    call WriteInt\n    call Crlf\n    add esi, 4\n    loop print_sorted\n\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Search Element in Array", "output": "INCLUDE Irvine32.inc\n.data\narr dword 4, 8, 15, 16, 23\ntarget dword 15\nfound_msg byte \"Found\", 0\nnot_msg byte \"Not Found\", 0\n.code\nmain PROC\n    mov esi, OFFSET arr\n    mov ecx, 5\nsearch_loop:\n    mov eax, [esi]\n    cmp eax, target\n    je found\n    add esi, 4\n    loop search_loop\n    mov edx, OFFSET not_msg\n    call WriteString\n    jmp done\nfound:\n    mov edx, OFFSET found_msg\n    call WriteString\ndone:\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Display Cursor at Custom Position", "output": "INCLUDE Irvine32.inc\n.data\nmsg byte \"At (10,5)\", 0\n.code\nmain PROC\n    mov dh, 5\n    mov dl, 10\n    call Gotoxy\n    mov edx, OFFSET msg\n    call WriteString\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Print User Input String", "output": "INCLUDE Irvine32.inc\n.data\nbuffer byte 20 dup(0)\n.code\nmain PROC\n    mov edx, OFFSET buffer\n    mov ecx, 20\n    call ReadString\n    mov edx, OFFSET buffer\n    call WriteString\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Use Procedure with Parameters (Sum of 2)", "output": "INCLUDE Irvine32.inc\n.data\na dword 4\nb dword 5\n.code\nmain PROC\n    mov eax, a\n    mov ebx, b\n    call AddTwo\n    call WriteInt\n    call waitmsg\nmain ENDP\n\nAddTwo PROC\n    add eax, ebx\n    ret\nAddTwo ENDP\nEND main"}
{"input": "Array Addition with Byte Swapping","output": "INCLUDE Irvine32.inc\n\n.data\narray1 dword 12345678h, 22345678h, 32345678h, 42345678h, 52345678h, 62345678h, 72345678h, 82345678h, 92345678h, 0A2345678h\narray2 dword 87654321h, 97654321h, 0A7654321h, 0B7654321h, 0C7654321h, 0D7654321h, 0E7654321h, 0F7654321h, 107654321h, 117654321h\nresult dword 10 dup(0)\nmsg byte \"Result: \",0\n\n.code\nmain PROC\n    ; Swap bytes in array1\n    mov esi, OFFSET array1\n    mov ecx, 10\nL1:\n    mov eax, [esi]\n    mov edx, eax\n    \n    ; Swap byte 0 and byte 3\n    rol eax, 8\n    mov bl, al\n    ror eax, 8\n    \n    ror edx, 24\n    mov bh, dl\n    rol edx, 24\n    \n    and eax, 0FF00FFFFh\n    and eax, 0FFFFFF00h\n    \n    or eax, ebx\n    shl ebx, 24\n    or eax, ebx\n    \n    mov [esi], eax\n    add esi, 4\n    loop L1\n\n    ; Swap bytes in array2\n    mov esi, OFFSET array2\n    mov ecx, 10\nL2:\n    mov eax, [esi]\n    mov edx, eax\n    \n    rol eax, 8\n    mov bl, al\n    ror eax, 8\n    \n    ror edx, 24\n    mov bh, dl\n    rol edx, 24\n    \n    and eax, 0FF00FFFFh\n    and eax, 0FFFFFF00h\n    \n    or eax, ebx\n    shl ebx, 24\n    or eax, ebx\n    \n    mov [esi], eax\n    add esi, 4\n    loop L2\n\n    ; Add the arrays\n    mov esi, OFFSET array1\n    mov edi, OFFSET array2\n    mov ebx, OFFSET result\n    mov ecx, 10\nL3:\n    mov eax, [esi]\n    add eax, [edi]\n    mov [ebx], eax\n    add esi, 4\n    add edi, 4\n    add ebx, 4\n    loop L3\n\n    ; Display result\n    mov edx, OFFSET msg\n    call WriteString\n    call Crlf\n    \n    mov esi, OFFSET result\n    mov ecx, 10\nL4:\n    mov eax, [esi]\n    call WriteHex\n    mov al, ' '\n    call WriteChar\n    add esi, 4\n    loop L4\n    \n    call Crlf\n    call waitmsg\nmain ENDP\nEND main"},
{"input": "Fibonacci Sequence","output": "INCLUDE Irvine32.inc\n\n.data\nfib dword 1, 1, 0, 0, 0, 0, 0\nmsg byte \"Fibonacci Sequence: \",0\n\n.code\nmain PROC\n    mov esi, OFFSET fib\n    mov ecx, 5\nL1:\n    mov eax, [esi]\n    add eax, [esi+4]\n    mov [esi+8], eax\n    add esi, 4\n    loop L1\n\n    mov edx, OFFSET msg\n    call WriteString\n    call Crlf\n    \n    mov esi, OFFSET fib\n    mov ecx, 7\nL2:\n    mov eax, [esi]\n    call WriteDec\n    mov al, ' '\n    call WriteChar\n    add esi, 4\n    loop L2\n    \n    call Crlf\n    call waitmsg\nmain ENDP\nEND main"},
{"input": "Palindrome Checker","output": "INCLUDE Irvine32.inc\n\n.data\nnum dword 12321\ntemp dword ?\nrev dword 0\nyes_msg byte \" is palindrome\",0\nno_msg byte \" is not palindrome\",0\n\n.code\nmain PROC\n    mov eax, num\n    call WriteDec\n    \n    mov temp, eax\n    xor ebx, ebx\n    \nreverse_loop:\n    mov edx, 0\n    mov ecx, 10\n    div ecx\n    push edx\n    inc ebx\n    test eax, eax\n    jnz reverse_loop\n\n    mov eax, 0\n    \nbuild_rev:\n    pop edx\n    mov ecx, 10\n    mul ecx\n    add eax, edx\n    dec ebx\n    jnz build_rev\n\n    mov rev, eax\n    cmp rev, temp\n    je is_palindrome\n\n    mov edx, OFFSET no_msg\n    call WriteString\n    jmp done\n    \nis_palindrome:\n    mov edx, OFFSET yes_msg\n    call WriteString\n    \ndone:\n    call Crlf\n    call waitmsg\nmain ENDP\nEND main"}
{"input": "Factorial Calculation with For Loop","output": "INCLUDE Irvine32.inc\n\n.data\nprompt byte \"Enter an integer (1-12): \",0\nresult byte \"Factorial is: \",0\nerror_msg byte \"Invalid input! Must be between 1-12\",0\nn dword ?\n.code\nmain PROC\n    ; Get user input\n    mov edx, OFFSET prompt\n    call WriteString\n    call ReadInt\n    mov n, eax\n\n    ; Validate input (1-12)\n    cmp eax, 1\n    jl invalid\n    cmp eax, 12\n    jg invalid\n\n    ; Calculate factorial\n    mov ecx, n        ; Initialize counter\n    mov eax, 1        ; Initialize result\n\nfactorial_loop:\n    mul ecx           ; eax = eax * ecx\n    loop factorial_loop\n\n    ; Display result\n    mov edx, OFFSET result\n    call WriteString\n    call WriteDec\n    jmp done\n\ninvalid:\n    mov edx, OFFSET error_msg\n    call WriteString\n\ndone:\n    call Crlf\n    call waitmsg\nmain ENDP\nEND main"},
{"input": "Nested Loops Implementation","output": "INCLUDE Irvine32.inc\n\n.data\nsi_val dword 0\n.code\nmain PROC\n    mov esi, 0        ; SI = 0\n\n    ; Outer loop (a from 4 to 1)\n    mov ecx, 4\nouter_loop:\n    push ecx          ; Save outer loop counter\n\n    ; Middle loop (b from 10 to 2, step -2)\n    mov ecx, 5\nmiddle_loop:\n    push ecx          ; Save middle loop counter\n\n    ; Inner loop (d from 3 to 1)\n    mov ecx, 3\ninner_loop:\n    inc esi           ; SI++\n    loop inner_loop\n\n    pop ecx           ; Restore middle loop counter\n    loop middle_loop\n\n    pop ecx           ; Restore outer loop counter\n    loop outer_loop\n\n    ; Display final SI value\n    mov eax, esi\n    call WriteDec\n    call Crlf\n\n    call waitmsg\nmain ENDP\nEND main"},
{"input": "Sum of Lower 8 Bits in Word Array","output": "INCLUDE Irvine32.inc\n\n.data\nword_array word 0110100010010001b, 1001001101110011b, 0111110100110111b, \n               0000100000000001b, 0000001100000011b, 0000110100000111b\narray_size = ($ - word_array) / 2\nsum byte 0\nmsg byte \"Sum in binary: \",0\n.code\nmain PROC\n    mov esi, OFFSET word_array\n    mov ecx, array_size\n    xor eax, eax      ; Clear sum\n\nsum_loop:\n    mov bx, [esi]     ; Get word\n    mov bl, bl        ; Isolate lower 8 bits\n    add al, bl        ; Add to sum\n    add esi, 2        ; Move to next word\n    loop sum_loop\n\n    ; Display result\n    mov edx, OFFSET msg\n    call WriteString\n    call WriteBinB    ; Display AL in binary\n    call Crlf\n\n    call waitmsg\nmain ENDP\nEND main"}
  